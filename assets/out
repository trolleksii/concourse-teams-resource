#!/usr/bin/env bash

set -eu

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

dir_put=$1

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

webhook_url="$(jq -r '.source.url' < ${payload})"
build_status="$(jq -r '(.params.status // null)' < $payload)"
message_file="$(jq -r '(.params.messageFile // "")' < $payload)"

case "$build_status" in
  success)
    message_color='00FF00'
    message_summary="${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME}"
    message_title="Build ${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME} succeeded"
    ;;
  failure)
    message_color='FF0000'
    message_summary="${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME}"
    message_title="Build ${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME} failed"
    ;;
  *)
    exit 1
    ;;
esac

message_title_link="${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
base="$(cat <<EOF
{
  "@type": "MessageCard",
  "@context": "https://schema.org/extensions",
  "summary": "${message_summary}",
  "themeColor": "${message_color}",
  "title": "${message_title}",
  "potentialAction": []
}
EOF
)"

default_action="$(cat <<EOF
{
  "@type": "OpenUri",
  "name": "Build Logs",
  "targets": [
    {
      "os": "default",
      "uri": "${message_title_link}"
    }
  ]
}
EOF
)"
other_actions="{}"
if [ -f "/tmp/build/put/${message_file}" ]; then
  other_actions="$(cat /tmp/build/put/${message_file})"
fi

data="$(echo ${base} ${other_actions} | jq -sc '.[0] * .[1]' | jq -c ".potentialAction[.potentialAction | length] |= . + $(echo ${default_action} | jq -c '.')")"

curl -X POST \
  "${webhook_url}" \
  -H 'Content-Type: application/json' \
  -H 'cache-control: no-cache' \
  -d "${data}"

#
# print the output
#
timestamp="$(jq -n "{version:{time:\"$(date --utc +%FT%T.%3NZ)\"}}")"
echo "$timestamp" | jq -s add >&3
